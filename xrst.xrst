SPDX-License-Identifier: GPL-3.0-or-later
SPDX-FileCopyrightText: 2020-22 Bradley M. Bell <bradbell@seanet.com>
----------------------------------------------------------------------------
empty group name
----------------------------------------------------------------------------
{xrst_begin example}

Examples
########
{xrst_toc_list
   example/get_started.xrst
   example/literal.cpp
   example/toc_list.xrst
   example/spell.xrst
   example/suspend.py
   example/code.py
   example/comment.r
   example/comment_ch.m
   example/heading.py
   example/indent.py
   example/docstring.py
   example/configure.xrst
   example/list.py
}

{xrst_end example}
----------------------------------------------------------------------------
user group name
----------------------------------------------------------------------------
{xrst_begin_parent user_guide user}
{xrst_spell
   autodoc
   doxygen
   gsl
}

Extract Sphinx RST Files
########################

Version 2022.9.23
*****************

Git Repository
**************
https://github.com/bradbell/xrst

Pip Install
***********
-  ``pip install --index-url https://test.pypi.org/simple/ xrst``

Run Program
***********
:ref:`run_xrst-0`

Motivation
**********
This is a pseudo sphinx extension that provides the features listed below.
It was motivated by cases like the GNU Scientific library,
which is not written in python, uses sphinx, and has its documentation
in separate files from the corresponding source code; see `gsl doc`_ .
It provides a system that extracts documentation from any source code
language and has some of the benefits of doxygen and autodoc without
some of the drawbacks.

.. _gsl doc: https://git.savannah.gnu.org/cgit/gsl.git/tree/doc

Features
********
#. Makes it easy to put documentation in source code comments
   when multiple computer languages are used by one package;
   e.g., see :ref:`comment_ch_cmd` .
#. Multiple pages can be specified in one
   input file and one page can be the parent for the
   other pages in the same file; see :ref:`begin_cmd` .
#. One can build subsets of the documentation; e.g., user, developer,
   examples. Pages for different subsets can be in the
   same input file; see :ref:`run_xrst@group_list`.
#. Documentation for one page can span multiple locations
   in source code; see :ref:`suspend_cmd`.
#. Organizes the contents tree
   for pages using commands that include files;
   see :ref:`toc_cmd`. This enables one to group multiple functions or classes
   into one page of the documentation.
#. Words in each heading are automatically included in the
   keyword index in a way that can be configured;
   see :ref:`run_xrst@sphinx_dir@keyword` .
#. Includes a configurable spell checker; see
   :ref:`spell_cmd` and :ref:`run_xrst@sphinx_dir@spelling` .
   The spell checker catches double word errors.
#. Makes it easy to include source code that executes
   directly below the current location; see :ref:`code_cmd` .
#. Source code can also be included from any location and any file;
   see :ref:`literal_cmd`.
   This uses tokens in source code, not line numbers,
   to signify start and stop of the inclusion.
   This makes it easy to move things, like function prototypes,
   to different places in the documentation.
#. The rst file name is used as an abbreviated title
   in the navigation bar. This makes the navigation bar more useful
   while also having long descriptive titles.
#. Each page (rst file) has a contents tree for its headings
   that is separate from the contents tree for the pages. This makes it
   easier to move pages to different places in the pages contents tree.
#. Automatically generates labels for linking to a heading in any page.
   These labels are designed with changing documentation in mind; e.g.,
   in this documentation the text
   ``:ref:`heading_links@Labels@Discussion``
   generates a link to :ref:`heading_links@Labels@Discussion`,
   which discusses these labels.

Contents
********
{xrst_toc_list
   xrst/run_xrst.py
}

{xrst_end user_guide}
----------------------------------------------------------------------------
{xrst_begin commands user}

Commands
########
If the text ``\\{xrst_`` appears in the input, the backslash is removed
form the xrst output and the text does not start an xrst command.
Otherwise the text ``{xrst_`` is reserved for the beginning of an xrst command.
These commands are described in the pages below:
{xrst_toc_list
   xrst/get_file_info.py
   xrst/toc_commands.py
   xrst/spell_command.py
   xrst/suspend_command.py
   xrst/code_command.py
   xrst/literal_command.py
   xrst/comment_command.py
   xrst/comment_ch_command.py
}

{xrst_end commands}
----------------------------------------------------------------------------
{xrst_begin automatic user}

Automatic Processing
####################
The processing described below happens without any commands:
{xrst_toc_list
   xrst/remove_indent.py
   xrst/process_headings.py
   xrst/auto_file.py
}


{xrst_end automatic}
----------------------------------------------------------------------------
app group name
----------------------------------------------------------------------------
{xrst_begin_parent appendix app}

Appendix
########

{xrst_end appendix}
----------------------------------------------------------------------------
{xrst_begin wish_list app}
{xrst_spell
   conf
   devel
   dir
   stackoverflow
   toml
}

Wish List
#########
The following is a wish list for future improvements to ``run_xrst``:

.. _stackoverflow: https://stackoverflow.com/questions/1686837/
   sphinx-documentation-tool-set-tab-width-in-output

Tabs
****
Tabs in xrst input is not tested because
tabs in a code blocks get expanded to 8 spaces; see stackoverflow_.
Perhaps we should add a command line option that sets the tab stops,
convert the tabs to spaces when a file is read,
and not include tabs in any of the processing after that.

Path
****
It would be nice to have a way, in sphinx, to make file names relative
to the directory where the :ref:`run_xrst@root_file` is located
so it would be the same as for xrst commands.

Configuration
*************
It would be nice to have a *sphinx_dir* ``/conf.toml`` file that
could be used for more complicated cases that can be handled by the
command line arguments.

Sphinx Error Messages
*********************
It would be nice to have a way to translate sphinx error messages
to the corresponding xrst input file and line number.

Developer Documentation
***********************
Now that xrst has a :ref:`run_xrst@group_list` option,
it would be nice to convert the developer documentation
to xrst with a group name that does not get included when
building the user documentation; e.g. ``devel`` .

Search
******
It would be nice for a search to display all of the index words for each
web page that matches the search.


{xrst_end wish_list}
----------------------------------------------------------------------------
{xrst_begin release_notes app}

xrst Release Notes By Year
##########################
{xrst_toc_hidden
   release_notes/2022.xrst
   release_notes/2021.xrst
}
:ref:`2022`,
:ref:`2021`

{xrst_end release_notes}
----------------------------------------------------------------------------
dev group name
----------------------------------------------------------------------------
{xrst_begin devel dev}

Developer Documentation
#######################

{xrst_toc_table
   xrst/__init__.py
}
{xrst_end devel}
