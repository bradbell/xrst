-----------------------------------------------------------------------------
                     xrst: Extract Sphinx RST Files
         Copyright (C) 2020-22 Bradley M. Bell (bradbell@seanet.com)
             This program is distributed under the terms of the
             GNU General Public License version 3.0 or later see
                   https://www.gnu.org/licenses/gpl-3.0.txt
----------------------------------------------------------------------------
BEGIN_GET_STARTED
{xrst_begin get_started start}

Getting Started Using xrst
##########################

Step 1
******
Create an empty directory and make it your working directory

Step 2
******
Create an empty sub-directory with the name ``sphinx`` .

Step 3
******
Create a file called ``doc.xrst`` with the following contents:
{xrst_file
    BEGIN_GET_STARTED
    END_GET_STARTED
}
The file command searches ``doc.xrst`` for the specified text and does not
include the text in the display above. You therefore will have to add
a line at the top (with the begin text)
and a line at the bottom (with the end text).

Step 4
******
Run the following commands :

#.  ``xrst doc.xrst``
#.  ``sphinx-build -b html sphinx html``

Step 5
******
Use your web browser to open the file

|   ``html/get_started.html``


{xrst_end get_started}
END_GET_STARTED
----------------------------------------------------------------------------
{xrst_begin_parent xrst}
{xrst_spell
    gsl
}

Extract Sphinx RST Files
########################

Version 2022.7.30
******************

Git Repository
**************
https://github.com/bradbell/xrst

Pip Install
***********
-   ``pip install --index-url https://test.pypi.org/simple/ xrst``

Run Program
***********
:ref:`@run_xrst`

Purpose
*******
This is a pseudo sphinx extension that provides the following features:

.. _gsl doc: https://git.savannah.gnu.org/cgit/gsl.git/tree/doc

#.  This extension was motivated by cases like the GNU Scientific library,
    which is not written in python, uses sphinx, and has its documentation
    in separate files from the corresponding source code; see `gsl doc`_ .
#.  The rst file name for each section is also an abbreviated title used
    in the navigation bar and for linking to the section. This makes the
    navigation bar more useful while also having long descriptive titles.
    It also makes cross reference linking from other sections easier.
#.  Each section has its own table of contents (for its headings) that is
    separate from the table of contents for the sections. This makes it
    easy to move sections to different places in the over all structure.
#.  Enables documentation in the comments for source code
    when multiple computer languages are used for one package.
#.  Allows the documentation for one section to span multiple locations
    in the source code; see :ref:`suspend command<suspend_cmd>`.
#.  Allows for multiple sections (rst output files) to be specified by one
    input file. In addition, one section can be the parent for the
    other sections in a file.
#.  Generates the table of contents from the specification
    of which files are included; see :ref:`child commands<child_cmd>`.
    Generates a jump table to the headings for each section
    so that the navigation bar need not include this information.
#.  Includes a configurable :ref:`spell checker<spell_cmd>` and
    :ref:`index<genindex>`. The spell checker catches double word errors.
    Words in each heading are automatically included in the index.
#.  Makes it easy to include source code that also executes, from
    directly below the :ref:`code command<code_cmd>` or from
    a different location in a :ref:`file<file_cmd>`.
    This uses tokens in the source, not line numbers,
    to signify start and stop of inclusion from a file.
#.  Automatically generates labels for linking to headings.
    These labels are designed with changing documentation in mind; see
    :ref:`heading_links@labels@discussion<heading_links@labels@discussion>`.

Contents
********
{xrst_child_list
    xrst/run_xrst.py
}

{xrst_end xrst}
----------------------------------------------------------------------------
{xrst_begin commands}

xrst Commands
#############
{xrst_child_list
    xrst/get_file_info.py
    xrst/child_commands.py
    xrst/spell_command.py
    xrst/suspend_command.py
    xrst/code_command.py
    xrst/file_command.py
    xrst/remove_comment_ch.py
}

{xrst_end commands}
----------------------------------------------------------------------------
{xrst_begin other_processing}

Other Processing
################
{xrst_child_list
    xrst/remove_indent.py
    xrst/process_headings.py
}


{xrst_end other_processing}
----------------------------------------------------------------------------
{xrst_begin wish_list}
{xrst_spell
    stackoverflow
    pyspellchecker
}

Wish List
#########
The following is a wish list for future improvements to ``run_xrst``:

.. _stackoverflow: https://stackoverflow.com/questions/1686837/
   sphinx-documentation-tool-set-tab-width-in-output

Standard Indent
***************
Change the number of spaces corresponding to a tab from 4 to 3 characters.
This better aligns wih usage in sphinx rst files and saves output columns.

Subset Documentation
********************
Have a way to specify subsets of the documentation by a group name.
For example ``{xrst_begin`` `section_name group_1 group_2}` would say that
this documentation should be included if `group_1` or `group_2`
is specified by the ``xrst`` command line.
If not groups were specified, all groups would be included.

Spelling
********
Add a command that automatically fixes spelling warnings by changing
the :ref:`@spell_cmd` in input sections. This is usefull when
pyspellchecker changes, when the
:ref:`run_xrst@sphinx_dir@spelling` file changes,
and when run_xrst automatically ignores more words.

Tabs
****
Tabs in a code blocks get expanded to 8 spaces; see stackoverflow_.
It would be nice to have a way to control the size of tabs in the code blocks
displayed by :ref:`@code_cmd` and :ref:`@file_cmd`.
Perhaps it would be good to support tabs as a method for
indenting xrst input sections.

{xrst_end wish_list}
----------------------------------------------------------------------------
{xrst_begin release_notes}

xrst Release Notes By Year
##########################
{xrst_children
    release_notes/2022.xrst
    release_notes/2021.xrst
}
:ref:`2022`,
:ref:`2021`

{xrst_end release_notes}
----------------------------------------------------------------------------
