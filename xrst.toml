# SPDX-License-Identifier: GPL-3.0-or-later
# SPDX-FileCopyrightText: 2020-22 Bradley M. Bell <bradbell@seanet.com>
#
# {xrst_begin xrst.toml user}
# {xrst_comment_ch #}
# {xrst_spell
#   configures
#   macros
#   newline
#   toml
# }
#
# Configuration File for xrst
# ###########################
# This toml file represents a python dictionary that configures xrst.
# All of its keys are strings.
# If a key has a default value, it is used when the key is not present,
# All of the directories mentioned below are relative to the directory
# where this file is located.
#
# output_directory
# ****************
# The default value for this key is
# ::
#
#   { 'html' : 'html' , 'pdf' : 'pdf' }
#
# The value is a dictionary that maps the :ref:`run_xrst@target` to the
# directory where the final output is stored. Note that the possible values
# for *target* are ``'html'`` and ``'pdf'`` and that the default
# uses the same name for the output directory.
#
# Example
# =======
# {xrst_code toml}
output_directory.html = 'html'
output_directory.pdf  = 'pdf'
# {xrst_code}
#
# rst_directory
# *************
# The default value for this key is ``'rst'`` .
# The value is a string specifying the
# directory where xrst writes the rst files it extracts from the source code.
# For each :ref:`begin_cmd@page_name` , the file
#
# |space| *rst_directory*\ /\ *page_name*\ ``.rst``
#
# is the RST file for the corresponding page. There is one exception
# to this rule. If *page_name* ends with ``.rst``, the extra ``.rst``
# is not added at the end.
#
# Example
# =======
# {xrst_code toml}
rst_directory = 'rst'
# {xrst_code}
#
# preamble
# ********
# If this key is present, its value is a string representation of the
# preamble.rst file.
# This file is included at the beginning of every page.
# It should only define things, it should not generate any output.
# The Latex macros in this file can be used by any page.
# There must be one macro definition per line and each such line must match the
# following python regular expression:
#
#    ``\n[ \t]*:math:`\\newcommand\{[^`]*\}`[ \t]*``
#
# Example
# =======
# {xrst_literal
#   # BEGIN_PREAMBLE
#   # END_PREAMBLE
# }
#
# project_dictionary
# ******************
# If this key is present, the value is a list of strings.
# Each string contains a newline separated list of words.
# Leading and trailing white space is not part of each word.
# These special words are not considered spelling errors this entire project.
# Special words, for a particular page, are specified using the
# :ref:`spell command<spell_cmd>`.
#
# Example
# =======
# {xrst_literal
#   # BEGIN_PROJECT_DICTIONARY
#   # END_PROJECT_DICTIONARY
# }
#
# not_in_index
# ************
# If this key is present, the value is a list of strings.
# Each string  contains a newline separated list of patterns.
# Leading and trailing white space is not part of each pattern.
# These are python regular expression patterns for heading tokens
# that are not included in the index.
# A heading token is any sequence of non white space characters
# with upper case letters converted to lower case.
# For example, a heading might contain the token ``The`` but you
# might not want to include ``the`` as a entry in the :ref:`genindex`.
# In this case you could have a line containing just ``the`` .
# For another example, you might want to exclude all tokens that are
# integer numbers.
# In this case you could have a line containing just ``[0-9]*`` .
#
# Example
# =======
# {xrst_literal
#   # BEGIN_NOT_KEYWORD
#   # END_NOT_KEYWORD
# }
#
# {xrst_end xrst.toml}
# -----------------------------------------------------------------------------
# BEGIN_PREAMBLE
preamble = '''
.. comment xrst preamble.rst

.. |space| unicode:: 0xA0
.. |tab| replace:: |space| |space| |space|

.. comment: These Latex macros can be used by any section. Each maco must be
   defined on its own line and the line must match the regular expression
   \n[ \t]*:math:`\\newcommand\{[^`]*\}`[ \t]*
   They should all be in a '.. rst-class:: hidden' block of preamble.rst

.. rst-class:: hidden

   :math:`\newcommand{\B}[1]{ {\bf #1} }`
   :math:`\newcommand{\R}[1]{ {\rm #1} }`
'''
# END_PREAMBLE
# -----------------------------------------------------------------------------
# BEGIN_PROJECT_DICTIONARY
project_dictionary = [
   # file extensions
   '''
     cpp
     py
     rst
   ''',
   # python types
   '''
     str
   ''',
   # special words
   '''
     factorial
   ''',
]
# END_PROJECT_DICTIONARY
# -----------------------------------------------------------------------------
# BEGIN_NOT_KEYWORD
not_in_index = [
  # articles and prepositions
  '''
      a
      and
      by
      for
      of
      the
      this
      to
  ''',
  # words that are use in many different pages of the documentation
  '''
    command
    example
    file
    purpose
    syntax
  ''',
  # python regular expression for month-day used in release notes
  '[0-9]{2}-[0-9]{2}',
  # python regular expression for year.month.day used in version number
  '[0-9]{4}[.][0-9]{1,2}[.][0-9]{1,2}',
]
# END_NOT_KEYWORD
